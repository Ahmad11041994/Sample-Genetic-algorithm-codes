#include <iostream>
#include<conio.h>
#include<iomanip>
#include<fstream>
#include<math.h>
#include<ctype.h>
#include<stdlib.h>
#include<time.h>

using namespace std;

void eval_obj(double obj[][2], double sol[][3])
{
	for (int i = 0; i < 100; i++)
	{
		obj[i][0] = 0;
		obj[i][1] = 0;
		for (int j = 0; j < 3; j++)
		{
			if (j < 2)
				obj[i][0] += -10 * exp(-0.2*sqrt(pow(sol[i][j], 2) + pow(sol[i][j + 1], 2)));
			obj[i][1] += pow(abs(sol[i][j]), 0.8) + 5 * sin(pow(sol[i][j], 3));


		}
	}
}

void det_dominance(double obj[][2], int frontier[], int pop_size)
{
	//int inf[pop_size], dom_list[pop_size][pop_size-1], checked[pop_size];

	int inf[200], dom_list[200][199], checked[200];




	int frnt_cnt = 0;
	int k = 0;
	int assigned = 0;

	for (int i = 0; i < pop_size; i++)
	{
		inf[i] = 0;
		checked[i] = -1;
		k = 0;
		for (int j = 0; j < pop_size; j++)
		{
			if (i == j) continue;
			else
			{
				if ((obj[i][0] > obj[j][0] and obj[i][1] > obj[j][1]) or (obj[i][0] > obj[j][0] and obj[i][1] == obj[j][1]) or (obj[i][0] == obj[j][0] and obj[i][1] > obj[j][1]))

					inf[i] += 1;
				if ((obj[i][0] < obj[j][0] and obj[i][1] < obj[j][1]) or (obj[i][0] < obj[j][0] and obj[i][1] == obj[j][1]) or (obj[i][0] == obj[j][0] and obj[i][1] < obj[j][1]))
				{
					dom_list[i][k] = j;
					k += 1;
				}
			}
		}
		for (int x = k; x < pop_size - 1; x++)
			dom_list[i][x] = -1;


	}

	while (assigned == 0)
	{
		assigned = 1;
		for (int i = 0; i < pop_size; i++)
		{
			if (inf[i] == 0)
			{
				frontier[i] = frnt_cnt;
				checked[i] = 1;
			}
		}
		for (int i = 0; i < pop_size; i++)
		{
			if ((inf[i] == 0) and (checked[i] == 1))
			{

				for (int j = 0; dom_list[i][j] != -1 and j < pop_size; j++)
					inf[dom_list[i][j]] -= 1;

				inf[i] = -1;
			}


		}
		for (int i = 0; i < pop_size; i++)
		{
			if (inf[i] != -1)
			{
				assigned = 0;
				break;

			}
		}
		frnt_cnt += 1;
	}



}
void cross(double pop[][3])
{
	int crossed[100], choice1, choice2, complete = 0;
	double temp1, temp2, temp3, temp4, a, pc;
	double d;
	//double a,
	double b;
	for (int i = 0; i < 100; i++)
		crossed[i] = -1;
	srand((unsigned)time(NULL));
	while (complete == 0)
	{
		complete = 1;
		do {
			choice1 = rand() % 100;
			choice2 = rand() % 100;
		} while (choice1 == choice2);

		if (crossed[choice1] != 1 and crossed[choice2] != 1)
		{
			pc = (double)rand() / (double)RAND_MAX;

			if (pc <= 0.9)
			{/*a=((double)rand()/(double)RAND_MAX);
			 temp1=pop[choice1][0];
			 temp2=pop[choice1][1];
			 temp3=pop[choice2][0];
			 temp4=pop[choice2][1];
			 pop[choice1][0]=a*temp1+(1-a)*temp3;
			 pop[choice1][1]=a*temp2+(1-a)*temp4;
			 pop[choice2][0]=(1-a)*temp1+a*temp3;
			 pop[choice2][1]=(1-a)*temp2+a*temp4;*/
				for (int j = (rand() % 3); j < 3; j++)
				{
					d = abs(pop[choice1][j] - pop[choice2][j]);
					if (pop[choice1][j] > pop[choice2][j])
					{
						a = pop[choice2][j] - 0.3*d;
						b = pop[choice1][j] + 0.3*d;

					}
					else
					{
						a = pop[choice1][j] - 0.3*d;
						b = pop[choice2][j] + 0.3*d;
					}

					pop[choice1][j] = a + ((double)rand() / (double)RAND_MAX)*(b - a);
					pop[choice2][j] = a + ((double)rand() / (double)RAND_MAX)*(b - a);
				}

				/*if (pop[choice1][0] > pop[choice2][0])
				{
					pop[choice1][0] = pop[choice2][0] + ((double)rand() / (double)RAND_MAX)*(pop[choice1][0] - pop[choice2][0]);
					pop[choice2][0] = pop[choice2][0] + ((double)rand() / (double)RAND_MAX)*(pop[choice1][0] - pop[choice2][0]);
				}
				else
				{
					pop[choice1][0] = pop[choice1][0] + ((double)rand() / (double)RAND_MAX)*(pop[choice2][0] - pop[choice1][0]);
					pop[choice2][0] = pop[choice1][0] + ((double)rand() / (double)RAND_MAX)*(pop[choice2][0] - pop[choice1][0]);

				}
				if (pop[choice1][1] > pop[choice2][1])
				{
					pop[choice1][1] = pop[choice2][1] + ((double)rand() / (double)RAND_MAX)*(pop[choice1][1] - pop[choice2][1]);
					pop[choice2][1] = pop[choice2][1] + ((double)rand() / (double)RAND_MAX)*(pop[choice1][1] - pop[choice2][1]);
				}
				else
				{
					pop[choice1][1] = pop[choice1][1] + ((double)rand() / (double)RAND_MAX)*(pop[choice2][1] - pop[choice1][1]);
					pop[choice2][1] = pop[choice1][1] + ((double)rand() / (double)RAND_MAX)*(pop[choice2][1] - pop[choice1][1]);

				}
				if (pop[choice1][2] > pop[choice2][2])
				{
					pop[choice1][2] = pop[choice2][2] + ((double)rand() / (double)RAND_MAX)*(pop[choice1][2] - pop[choice2][2]);
					pop[choice2][2] = pop[choice2][2] + ((double)rand() / (double)RAND_MAX)*(pop[choice1][2] - pop[choice2][2]);
				}
				else
				{
					pop[choice1][2] = pop[choice1][2] + ((double)rand() / (double)RAND_MAX)*(pop[choice2][2] - pop[choice1][2]);
					pop[choice2][2] = pop[choice1][2] + ((double)rand() / (double)RAND_MAX)*(pop[choice2][2] - pop[choice1][2]);

				}*/

			}
			crossed[choice1] = 1;
			crossed[choice2] = 1;

		}
		for (int i = 0; i < 100; i++)
		{
			if (crossed[i] == -1)
			{
				complete = 0;
				break;
			}
		}



	}



}
void mutate(double sol[][3],double fit[][2])
{
	double pm, sum = 0, a, b,temp[2];
	srand((unsigned)time(NULL));
	for (int i = 0; i < 100; i++)
	{
		X:
		for (int j = 0; j < 3; j++)
		{
			pm = (double)rand() / (double)RAND_MAX;
	
			if (pm <= 0.6)
			{
				

				
				/*for (int k = 0; k < 15; k++)
				{
					pm = rand() % 16;
					sum += pm * pow(2, -k);
				}
				a = sol[i][j] - 0.1*(10)*sum;
				b = sol[i][j] + 0.1*(10)*sum;*/
				sol[i][j] = -5 + ((double)rand() / (double)RAND_MAX) * 10;

			}
              
		}
		for (int k = 0; k < 3; k++)
		{
			if (k < 2)
				temp[0] += -10 * exp(-0.2*sqrt(pow(sol[i][k], 2) + pow(sol[i][k + 1], 2)));
			temp[1] += pow(abs(sol[i][k]), 0.8) + 5 * sin(pow(sol[i][k], 3));
        }
		if (temp[0] > fit[i][0] and temp[1] > fit[i][1]) goto X;
			
			

	}
}
void quicksort(double sol[][3], double fit[][2], int l, int r, int obj_no)
{
	if (l >= r)
		return;
	double pivot = fit[r][obj_no];
	int cnt = l;
	double temp;
	for (int i = l; i <= r; i++)
	{
		if (fit[i][obj_no] <= pivot)
		{
			temp = fit[i][obj_no];
			fit[i][obj_no] = fit[cnt][obj_no];
			fit[cnt][obj_no] = temp;
			temp = sol[i][0];
			sol[i][0] = sol[cnt][0];
			sol[cnt][0] = temp;
			temp = sol[i][1];
			sol[i][1] = sol[cnt][1];
			sol[cnt][1] = temp;
			temp = sol[i][2];
			sol[i][2] = sol[cnt][2];
			sol[cnt][2] = temp;
			cnt++;
		}
	}
	quicksort(sol, fit, l, cnt - 2, obj_no);
	quicksort(sol, fit, cnt, r, obj_no);
}
void quicksort(double sol[][3], int fit[], int l, int r)
{
	if (l >= r)
		return;
	double pivot = fit[r];
	int cnt = l;
	double temp;
	int temp1;
	for (int i = l; i <= r; i++)
	{
		if (fit[i] <= pivot)
		{
			temp1 = fit[i];
			fit[i] = fit[cnt];
			fit[cnt] = temp1;
			for (int j = 0; j < 3; j++)
			{
				temp = sol[i][j];
				sol[i][j] = sol[cnt][j];
				sol[cnt][j] = temp;
			}
			cnt++;
		}
	}
	quicksort(sol, fit, l, cnt - 2);
	quicksort(sol, fit, cnt, r);
}
void cal_crowding_dist(double sol[][3], int front[], double fit[][2], double dist[])
{
	int old_cnt = 0, new_cnt = 0, front_cnt = 0;
	for (int i = 0; i < 200; i++)
		dist[i] = 0;
	quicksort(sol, front, 0, 199);
	old_cnt = 0;
	new_cnt = 0;
	front_cnt = 0;
	while (new_cnt < 200)
	{



		for (int j = 0; j < 200; j++)
		{
			if (front[j] == front_cnt)
			{
				new_cnt += 1;
			}
		}
		for (int i = 0; i < 2; i++)
		{
			quicksort(sol, fit, old_cnt, new_cnt - 1, i);
			dist[old_cnt] = 1000000;
			dist[new_cnt - 1] = dist[old_cnt];

			for (int j = old_cnt + 1; j < new_cnt - 1; j++)
				dist[j] += fit[j + 1][i] - fit[j - 1][i];

		}
		old_cnt = new_cnt;
		front_cnt += 1;
	}
}
void quicksort_pareto(double sol[][3], int front[], double dist[], int l, int r)
{
	if (l >= r)
		return;
	double pivot[2];
	pivot[0] = front[r];
	pivot[1] = dist[r];
	int cnt = l;
	double temp;
	int temp1;
	for (int i = l; i <= r; i++)
	{
		if ((front[i] < pivot[0]) or (front[i] == pivot[0] and dist[i] >= pivot[1]))
		{
			temp1 = front[i];
			front[i] = front[cnt];
			front[cnt] = temp1;
			temp = dist[i];
			dist[i] = dist[cnt];
			dist[cnt] = temp;
			for (int j = 0; j < 3; j++)
			{
				temp = sol[i][j];
				sol[i][j] = sol[cnt][j];
				sol[cnt][j] = temp;
			}

			cnt++;
		}
	}
	quicksort_pareto(sol, front, dist, l, cnt - 2);
	quicksort_pareto(sol, front, dist, cnt, r);
}
void selection(double p_pop[][3], double q_pop[][3], int front[], double c_dist[])
{
	int filled = 0, choice1, choice2;
	while (filled < 100)
	{
		choice1 = rand() % 100;
		choice2 = rand() % 100;
		if ((front[choice1] < front[choice2]) or (front[choice1] == front[choice2] and c_dist[choice1] >= c_dist[choice2]))
		{
			for (int j = 0; j < 3; j++)
				q_pop[filled][j] = p_pop[choice1][j];
			filled += 1;

		}
		else if ((front[choice1] > front[choice2]) or (front[choice1] == front[choice2] and c_dist[choice1] <= c_dist[choice2]))
		{
			for (int j = 0; j < 3; j++)
				q_pop[filled][j] = p_pop[choice2][j];
			filled += 1;
		}
	}
}

int main()
{
	double p_pop[100][3];
	double r_pop[200][3];
	double selected[100][3];
	double temp_pop[200][3];
	double temp_fit[200][2];
	double fit_val[100][2];
	double fit_val_c[100][2];
	double fit_val_r[200][2];
	double c_dist_r[200];
	double temp_dist[200];
	int temp_front_lvl[200];
	int front_lvl[100];
	int front_lvl_c[100];
	int front_lvl_r[200];
	int front_cnt = 0;
	int gen_cnt = 0;


	srand((unsigned)time(NULL));
	for (int i = 0; i < 100; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			p_pop[i][j] = ((double)rand() / (double)RAND_MAX) * 10 - 5.0;
		}
	}

	eval_obj(fit_val, p_pop);
	det_dominance(fit_val, front_lvl, 100);
	/*for (int i = 0; i < 100; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			cout << p_pop[i][j] << "    ";


		}
		for (int j = 0; j < 2; j++)
		{
			cout << fit_val[i][j] << "   ";
		}

		cout << front_lvl[i] << "\n";
	}*/
	int filled = 0, choice1, choice2;
	while (filled < 100)
	{
		choice1 = rand() % 100;
		choice2 = rand() % 100;
		if (front_lvl[choice1] < front_lvl[choice2])
		{
			for (int j = 0; j < 3; j++)
				selected[filled][j] = p_pop[choice1][j];
			filled += 1;

		}
		else if (front_lvl[choice1] > front_lvl[choice2])
		{
			for (int j = 0; j < 3; j++)
				selected[filled][j] = p_pop[choice2][j];
			filled += 1;
		}
		else if ((front_lvl[choice1] == front_lvl[choice2]) and (front_lvl[choice1] < 5))
		{
			for (int j = 0; j < 3; j++)
			{
				selected[filled][j] = p_pop[choice1][j];
				selected[filled + 1][j] = p_pop[choice2][j];
			}
			filled += 2;
		}
		else
			continue;


	}
	cross(selected);
	eval_obj(fit_val_c, selected);
	mutate(selected,fit_val_c);

	while (gen_cnt < 500)
	{
		eval_obj(fit_val_c, selected);
		//det_dominance(fit_val_c, front_lvl_c,100);

		for (int i = 0; i < 200; i++)
		{
			for (int j = 0; j < 3; j++)
			{
				if (i < 100)
					r_pop[i][j] = p_pop[i][j];

				else
					r_pop[i][j] = selected[i - 100][j];
			}
			if (i < 100)
			{
				fit_val_r[i][0] = fit_val[i][0];
				fit_val_r[i][1] = fit_val[i][1];
				//front_lvl_r[i] = front_lvl[i];

			}
			else
			{
				fit_val_r[i][0] = fit_val_c[i - 100][0];
				fit_val_r[i][1] = fit_val_c[i - 100][1];
				//front_lvl_r[i] = front_lvl_c[i - 100];
			}

		}
		//for (int i = 0; i < 200; i++) cout << front_lvl_r[i] <<" "<<i<<"\n";
		det_dominance(fit_val_r, front_lvl_r, 200);
		cal_crowding_dist(r_pop, front_lvl_r, fit_val_r, c_dist_r);
		quicksort(r_pop, front_lvl_r, 0, 199);

		front_cnt = 0;
		filled = 0;
		while (filled <= 100)
		{
			for (int i = 0; i < 200; i++)
			{
				if (front_lvl_r[i] == front_cnt)
				{
					temp_pop[i][0] = r_pop[i][0];
					temp_pop[i][1] = r_pop[i][1];
					temp_pop[i][2] = r_pop[i][2];
					temp_fit[i][0] = fit_val_r[i][0];
					temp_fit[i][1] = fit_val_r[i][1];
					temp_front_lvl[i] = front_lvl_r[i];
					temp_dist[i] = c_dist_r[i];
					filled += 1;

				}
			}
			front_cnt += 1;
		}
		quicksort_pareto(temp_pop, temp_front_lvl, temp_dist, 0, filled - 1);
		for (int i = 0; i < 100; i++)
		{
			p_pop[i][0] = temp_pop[i][0];
			p_pop[i][1] = temp_pop[i][1];
			p_pop[i][2] = temp_pop[i][2];
		}
		eval_obj(fit_val, p_pop);
		det_dominance(fit_val, front_lvl, 100);
		selection(p_pop, selected, front_lvl, temp_dist);
		cross(selected);
		eval_obj(fit_val_c, selected);
		mutate(selected,fit_val_c);
		gen_cnt += 1;
	}
	//eval_obj(fit_val_c, selected);
	//det_dominance(fit_val_c, front_lvl_c);

	for (int i = 0; i < 100; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			cout << p_pop[i][j] << "    ";


		}
		for (int j = 0; j < 2; j++)
		{
			cout << fit_val[i][j] << "   ";
		}

		cout << front_lvl[i] << "\n";


	}
	system("pause");
	//delete[] fit_val_c;
	return 0;



}
